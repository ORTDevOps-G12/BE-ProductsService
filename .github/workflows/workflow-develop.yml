name: CI/CD Pipeline - Develop

on:
  push:
    branches:
      - develop
      - feature/terrafom

jobs:
  test-SonarCloud:
    runs-on: ubuntu-latest
    needs: job-build
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of analysis
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: "zulu" # Alternative distribution options are available.
      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }} # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=ORTDevOps-G12_BE-ProductsService

  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'adopt'
          java-version: '17'
      
      - name: Mover al directorio de c√≥digo
        run: cd codeSource
        
      - name: Grant execute permission for Maven Wrapper
        run: chmod +x ./codeSource/mvnw
        
      - name: Install dependencies
        working-directory: ./codeSource
        run: ./mvnw dependency:resolve

      - name: Grant execute permission for build script
        run: chmod +x .github/scripts/build.sh

      - name: Run build script
        run: |
          ./.github/scripts/build.sh
          
      - name: Verify JAR
        working-directory: ./codeSource
        run: |
          echo "Verifying JAR in build job..."
          file out/products-service-example-0.0.1-SNAPSHOT.jar
          unzip -p out/products-service-example-0.0.1-SNAPSHOT.jar META-INF/MANIFEST.MF
          
      - name: Upload JAR as artifact
        uses: actions/upload-artifact@v2
        with:
          name: products-service-example-jar
          path: ./codeSource/out/products-service-example-0.0.1-SNAPSHOT.jar

  docker-build:
    runs-on: ubuntu-latest
    needs: build
    env:
      DOCKER_IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/products-service-example:test
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Download JAR artifact
        uses: actions/download-artifact@v2
        with:
          name: products-service-example-jar
          path: ./

      - name: Verify JAR before building Docker image
        run: |
          file products-service-example-0.0.1-SNAPSHOT.jar
          unzip -p products-service-example-0.0.1-SNAPSHOT.jar META-INF/MANIFEST.MF
          
      - name: Build Docker image
        working-directory: ./codeSource
        run: |
          docker build --build-arg JAR_FILE=products-service-example-0.0.1-SNAPSHOT.jar -t ${{ secrets.DOCKER_USERNAME }}/products-service-example:dev1 .

      - name: Login en Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push de imagen Docker
        run: |
          docker images
          docker push ${{ secrets.DOCKER_USERNAME }}/products-service-example:dev1

  deploy-tf-backend:
    runs-on: ubuntu-latest
    needs: docker-build
    env:
      DOCKER_IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/products-service-example:test1
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
    steps:
      - name: Checkout IaC code
        uses: actions/checkout@v2
        with:
          path: IaC

      - name: List files in IaC/IaC directory
        run: ls -al IaC/IaC

      - name: Configure AWS credentials
        run: |
          echo "AWS credentials configured"

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Initialize Terraform
        working-directory: IaC/IaC
        run: terraform init

      - name: Apply Terraform
        working-directory: IaC/IaC
        run: |
          export TF_LOG=DEBUG
          terraform apply -auto-approve \
            -var "aws_access_key=$AWS_ACCESS_KEY_ID" \
            -var "aws_secret_key=$AWS_SECRET_ACCESS_KEY" \
            -var "aws_token=$AWS_SESSION_TOKEN" \
            -var "aws_region=$AWS_REGION" \
            -var "backend_image=$DOCKER_IMAGE_NAME"