name: CI/CD Pipeline - Develop

on:
  push:
    branches:
      - develop
      - feature/terrafom

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'adopt'
          java-version: '17'
        
      - name: Grant execute permission for Maven Wrapper
        run: chmod +x ./mvnw
        
      - name: Install dependencies
        run: ./mvnw dependency:resolve

      - name: Grant execute permission for build script
        run: chmod +x .github/scripts/build.sh

      - name: Run build script
        run: |
          ./.github/scripts/build.sh
      
      - name: Get project version
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          
      - name: Verify JAR
        run: |
          echo "Verifying JAR in build job..."
          file out/products-service-example-0.0.1-SNAPSHOT.jar
          unzip -p out/products-service-example-0.0.1-SNAPSHOT.jar META-INF/MANIFEST.MF
          
      - name: Upload JAR as artifact
        uses: actions/upload-artifact@v2
        with:
          name: products-service-example-jar
          path: ./out/products-service-example-0.0.1-SNAPSHOT.jar

  docker-build:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Download JAR artifact
        uses: actions/download-artifact@v2
        with:
          name: products-service-example-jar
          path: ./

      - name: Verify JAR before building Docker image
        run: |
          file products-service-example-0.0.1-SNAPSHOT.jar
          unzip -p products-service-example-0.0.1-SNAPSHOT.jar META-INF/MANIFEST.MF
          
      - name: Build Docker image
        run: |
          docker build --build-arg JAR_FILE=products-service-example-0.0.1-SNAPSHOT.jar -t ${{ secrets.DOCKER_USERNAME }}/products-service-example:0.0.1-SNAPSHOT .

      - name: Login en Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push de imagen Docker
        run: |
          docker images
          docker push ${{ secrets.DOCKER_USERNAME }}/products-service-example:0.0.1-SNAPSHOT

  deploy:
    runs-on: ubuntu-latest
    needs: docker-build
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Update ECS service
        run: |
          CLUSTER_NAME="clusterManualTest"
          SERVICE_NAME="servicemanualTest"
          CONTAINER_NAME="containerManualTest"
          IMAGE_NAME="${{ secrets.DOCKER_USERNAME }}/products-service-example:0.0.1-SNAPSHOT"
          
          TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition manualtaskTest)
          NEW_TASK_DEFINITION=$(echo $TASK_DEFINITION | jq --arg IMAGE "$IMAGE_NAME" --arg CONTAINER_NAME "$CONTAINER_NAME" '.taskDefinition | .containerDefinitions |= map(if .name == $CONTAINER_NAME then .image = $IMAGE else . end)')
          NEW_TASK_DEFINITION=$(echo $NEW_TASK_DEFINITION | jq 'del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy)')
          NEW_TASK_DEFINITION_ARN=$(aws ecs register-task-definition --cli-input-json "$NEW_TASK_DEFINITION" --query 'taskDefinition.taskDefinitionArn' --output text)
          
          aws ecs update-service --cluster $CLUSTER_NAME --service $SERVICE_NAME --task-definition $NEW_TASK_DEFINITION_ARN --force-new-deployment